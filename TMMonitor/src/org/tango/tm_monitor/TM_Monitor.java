/*----- PROTECTED REGION ID(TM_Monitor.java) ENABLED START -----*/
//=============================================================================
//
// file :        TM_Monitor.java
//
// description : Java source for the TM_Monitor class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TM_Monitor are implemented in this file.
//
// project :     TM.Monitor
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*///	TM_Monitor.java

package org.tango.tm_monitor;

/*----- PROTECTED REGION ID(TM_Monitor.imports) ENABLED START -----*/
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.Authenticator;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.PasswordAuthentication;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.DeviceState;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.AroundInvoke;
import org.tango.server.annotation.Attribute;
import org.tango.server.annotation.AttributeProperties;
import org.tango.server.annotation.ClassProperty;
import org.tango.server.annotation.Command;
import org.tango.server.annotation.Delete;
import org.tango.server.annotation.Device;
import org.tango.server.annotation.DeviceProperty;
import org.tango.server.annotation.DynamicManagement;
import org.tango.server.annotation.Init;
import org.tango.server.annotation.State;
import org.tango.server.annotation.StateMachine;
import org.tango.server.annotation.Status;
import org.tango.server.annotation.DeviceManagement;
import org.tango.server.annotation.Pipe;
import org.tango.server.attribute.ForwardedAttribute;
import org.tango.server.pipe.PipeValue;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.device.DeviceManager;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.events.EventManager;
import org.tango.server.events.EventType;
import org.tango.utils.DevFailedUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

//	Import Tango IDL types
import fr.esrf.Tango.*;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoApi.PipeBlob;
import fr.esrf.TangoApi.PipeDataElement;

/*----- PROTECTED REGION END -----*///	TM_Monitor.imports

/**
 * TM_Monitor class description:
 * 
 */

@Device
public class TM_Monitor {

	protected static final Logger logger = LoggerFactory
			.getLogger(TM_Monitor.class);
	protected static final XLogger xlogger = XLoggerFactory
			.getXLogger(TM_Monitor.class);

	// ========================================================
	// Programmer's data members
	// ========================================================
	/*----- PROTECTED REGION ID(TM_Monitor.variables) ENABLED START -----*/

	// Put static variables here

	/*----- PROTECTED REGION END -----*/// TM_Monitor.variables
	/*----- PROTECTED REGION ID(TM_Monitor.private) ENABLED START -----*/

	// Put private variables here

	/*----- PROTECTED REGION END -----*/// TM_Monitor.private

	// ========================================================
	// Property data members and related methods
	// ========================================================

	// ========================================================
	// Miscellaneous methods
	// ========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed
	 *             if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public void initDevice() throws DevFailed {
		xlogger.entry();
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(TM_Monitor.initDevice) ENABLED START -----*/

		try {

			File fXmlFile = new File("settings.xml");
			DocumentBuilderFactory dbFactory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
			Document doc = dBuilder.parse(fXmlFile);

			// optional, but recommended
			// read this -
			// http://stackoverflow.com/questions/13786607/normalization-in-dom-parsing-with-java-how-does-it-work
			doc.getDocumentElement().normalize();

			logger.debug("Root element :"
					+ doc.getDocumentElement().getNodeName());

			NodeList nList = doc.getElementsByTagName("attributes");

			logger.debug("----------------------------");

			for (int temp = 0; temp < nList.getLength(); temp++) {

				Node nNode = nList.item(temp);

				logger.debug("\nCurrent Element :" + nNode.getNodeName());

				if (nNode.getNodeType() == Node.ELEMENT_NODE) {

					Element eElement = (Element) nNode;
					NodeList nChildList = eElement.getChildNodes();
					SettingAttribute settingAttribute = new SettingAttribute();
					for (int i = 0; i < nChildList.getLength(); i++) {
						if (nChildList.item(i).getNodeName().equals("key")) {
							settingAttribute.key = nChildList.item(i)
									.getTextContent();
						}
						if (nChildList.item(i).getNodeName()
								.equals("nagios_cgi_query")) {
							settingAttribute.nagios_query = nChildList.item(i)
									.getTextContent();
						}
						if (nChildList.item(i).getNodeName()
								.equals("json_query_result")) {
							settingAttribute.json_query = nChildList.item(i)
									.getTextContent();
						}
					}
					_internalSettings.put(settingAttribute.key,
							settingAttribute);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		Enumeration<String> enumStr = _internalSettings.keys();
		while (enumStr.hasMoreElements()) {
			String key = enumStr.nextElement();
			// Put your device initialization code here
			org.tango.server.attribute.AttributeValue attributeValue = new org.tango.server.attribute.AttributeValue(
					key);
			attributeValue.setValue(getNagiosValue(key));
			GenericAttribute myNewAttr = new GenericAttribute(attributeValue);
			dynamicManager.addAttribute(myNewAttr);
		}

		/*----- PROTECTED REGION END -----*/// TM_Monitor.initDevice
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed
	 *             if something fails during the device object delation.
	 */
	@Delete
	public void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(TM_Monitor.deleteDevice) ENABLED START -----*/

		// Put your device clearing code here

		/*----- PROTECTED REGION END -----*/// TM_Monitor.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * 
	 * @param ctx
	 *            the invocation context
	 * @throws DevFailed
	 *             if something fails during this method execution.
	 */
	@AroundInvoke
	public void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(TM_Monitor.aroundInvoke) ENABLED START -----*/

		// Put aroundInvoke code here

		/*----- PROTECTED REGION END -----*/// TM_Monitor.aroundInvoke
		xlogger.exit();
	}

	/**
	 * dynamic command and attribute management. Will be injected by the
	 * framework.
	 */
	@DynamicManagement
	protected DynamicManager dynamicManager;

	/**
	 * @param dynamicManager
	 *            the DynamicManager instance
	 * @throws DevFailed
	 *             if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager)
			throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(TM_Monitor.setDynamicManager) ENABLED START -----*/

		// Put your code here

		/*----- PROTECTED REGION END -----*/// TM_Monitor.setDynamicManager
	}

	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;

	public void setDeviceManager(DeviceManager deviceManager) {
		this.deviceManager = deviceManager;
	}

	// ========================================================
	// Command data members and related methods
	// ========================================================
	/**
	 * The state of the device
	 */
	@State
	private DevState state = DevState.UNKNOWN;

	/**
	 * Execute command "State". description: This command gets the device state
	 * (stored in its 'state' data member) and returns it to the caller.
	 * 
	 * @return Device state
	 * @throws DevFailed
	 *             if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(TM_Monitor.getState) ENABLED START -----*/

		// Put state code here

		/*----- PROTECTED REGION END -----*/// TM_Monitor.getState
		return state;
	}

	/**
	 * Set the device state
	 * 
	 * @param state
	 *            the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}

	/**
	 * The status of the device
	 */
	@Status
	private String status = "Server is starting. The device state is unknown";

	/**
	 * Execute command "Status". description: This command gets the device
	 * status (stored in its 'status' data member) and returns it to the caller.
	 * 
	 * @return Device status
	 * @throws DevFailed
	 *             if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(TM_Monitor.getStatus) ENABLED START -----*/

		// Put status code here

		/*----- PROTECTED REGION END -----*/// TM_Monitor.getStatus
		return status;
	}

	/**
	 * Set the device status
	 * 
	 * @param status
	 *            the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}

	/**
	 * Execute command "HostList". description:
	 * 
	 * @return
	 * @throws DevFailed
	 *             if command execution failed.
	 */
	@Command(name = "HostList", inTypeDesc = "", outTypeDesc = "")
	public String[] HostList() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(TM_Monitor.hostList) ENABLED START -----*/

		// Put command code here
		// http://ska-tm1.ia2.inaf.it/nagios/cgi-bin/statusjson.cgi?query=hostlist
		String jsonres = new NagiosCGIRequest().excutePost(
				"http://ska-tm1.ia2.inaf.it/nagios/cgi-bin/statusjson.cgi",
				"query=hostlist");
		ArrayList<String> list = new ArrayList<String>();
		JSONObject jsonObj = new JSONObject(jsonres);
		JSONArray arrayRes = jsonObj.getJSONObject("data")
				.getJSONObject("hostlist").names();
		for (int i = 0; i < arrayRes.length(); i++) {
			list.add(arrayRes.getString(i));
		}
		/*----- PROTECTED REGION END -----*/// TM_Monitor.hostList
		xlogger.exit();
		return list.toArray(new String[0]);
	}

	/**
	 * Execute command "ServiceList". description:
	 * 
	 * @return
	 * @throws DevFailed
	 *             if command execution failed.
	 */
	@Command(name = "ServiceList", inTypeDesc = "", outTypeDesc = "")
	public String[] ServiceList() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(TM_Monitor.serviceList) ENABLED START -----*/

		// Put command code here
		// http://ska-tm1.ia2.inaf.it/nagios/cgi-bin/statusjson.cgi?query=servicelist
		String jsonres = new NagiosCGIRequest().excutePost(
				"http://ska-tm1.ia2.inaf.it/nagios/cgi-bin/statusjson.cgi",
				"query=servicelist");
		ArrayList<String> list = new ArrayList<String>();
		JSONObject jsonObj = new JSONObject(jsonres);
		JSONObject servicelist = jsonObj.getJSONObject("data").getJSONObject(
				"servicelist");
		Iterator<String> iteratorServiceList = servicelist.keys();
		while (iteratorServiceList.hasNext()) {
			String keyHost = iteratorServiceList.next();
			JSONArray arrayServicesPerHost = servicelist.getJSONObject(keyHost)
					.names();
			for (int i = 0; i < arrayServicesPerHost.length(); i++) {
				if (!list.contains(arrayServicesPerHost.getString(i)))
					list.add(arrayServicesPerHost.getString(i));
			}
		}
		/*----- PROTECTED REGION END -----*/// TM_Monitor.serviceList
		xlogger.exit();
		return list.toArray(new String[0]);
	}

	/**
	 * Execute command "CheckService". description:
	 * 
	 * @param checkServiceIn
	 * @return
	 * @throws DevFailed
	 *             if command execution failed.
	 */
	@Command(name = "CheckService", inTypeDesc = "", outTypeDesc = "")
	public String CheckService(String[] checkServiceIn) throws DevFailed {
		xlogger.entry();
		String checkServiceOut = "No result.";
		/*----- PROTECTED REGION ID(TM_Monitor.checkService) ENABLED START -----*/
		if (checkServiceIn.length < 2) {
			String errorMessage = "Must enter two parameter: hostname and service description to get the output.";
			DevError err = new DevError(errorMessage, ErrSeverity.PANIC,
					errorMessage, "CheckService");
			throw new DevFailed(errorMessage, new DevError[] { err });
		}
		// Put command code here
		// http://ska-tm1.ia2.inaf.it/nagios/cgi-bin/statusjson.cgi?query=service&hostname=localhost&servicedescription=Current+Load
		String jsonString = new NagiosCGIRequest().excutePost(
				"http://ska-tm1.ia2.inaf.it/nagios/cgi-bin/statusjson.cgi",
				"query=service&hostname=" + checkServiceIn[0]
						+ "&servicedescription="
						+ checkServiceIn[1].replace(' ', '+'));

		JSONObject jsonObj = new JSONObject(jsonString);
		checkServiceOut = jsonObj.getJSONObject("data")
				.getJSONObject("service").getString("plugin_output");

		/*----- PROTECTED REGION END -----*/// TM_Monitor.checkService
		xlogger.exit();
		return checkServiceOut;
	}

	// ========================================================
	// Programmer's methods
	// ========================================================
	/*----- PROTECTED REGION ID(TM_Monitor.methods) ENABLED START -----*/

	Dictionary<String, SettingAttribute> _internalSettings = new Hashtable<String, SettingAttribute>();

	class SettingAttribute {
		public String key;
		public String nagios_query;
		public String json_query;
	}

	private String getNagiosValue(String key) {
		SettingAttribute _SettingAttribute = _internalSettings.get(key);
		int nindex = _SettingAttribute.nagios_query.indexOf("?");
		String targetURL = _SettingAttribute.nagios_query.substring(0, nindex);
		String parameters = _SettingAttribute.nagios_query.substring(
				nindex + 1, _SettingAttribute.nagios_query.length());
		String jsonres = new NagiosCGIRequest().excutePost(targetURL,
				parameters);
		JSONObject jsonObj = new JSONObject(jsonres);
		String[] splitted = _SettingAttribute.json_query.split("/");
		for (int i = 0; i < splitted.length; i++) {
			if (i == splitted.length - 1)
				return jsonObj.getString(splitted[i]);
			else
				jsonObj = jsonObj.getJSONObject(splitted[i]);
		}
		return jsonObj.toString();
	}

	class NagiosCGIRequest {
		public String excutePost(String targetURL, String urlParameters) {
			HttpURLConnection connection = null;
			try {
				Authenticator.setDefault(new Authenticator() {

					String login = "nagiosadmin";
					String password = "nagiosadmin";

					@Override
					protected PasswordAuthentication getPasswordAuthentication() {
						return new PasswordAuthentication(login, password
								.toCharArray());
					}
				});

				// Create connection
				URL url = new URL(targetURL);
				connection = (HttpURLConnection) url.openConnection();
				connection.setRequestMethod("POST");
				connection.setRequestProperty("Content-Type",
						"application/x-www-form-urlencoded");

				connection.setRequestProperty("Content-Length",
						Integer.toString(urlParameters.getBytes().length));
				connection.setRequestProperty("Content-Language", "en-US");

				connection.setUseCaches(false);
				connection.setDoOutput(true);

				// Send request
				DataOutputStream wr = new DataOutputStream(
						connection.getOutputStream());
				wr.writeBytes(urlParameters);
				wr.close();

				// Get Response
				InputStream is = connection.getInputStream();
				BufferedReader rd = new BufferedReader(
						new InputStreamReader(is));
				StringBuilder response = new StringBuilder(); // or StringBuffer
																// if not Java
																// 5+
				String line;
				while ((line = rd.readLine()) != null) {
					response.append(line);
					response.append('\r');
				}
				rd.close();
				return response.toString();
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			} finally {
				if (connection != null) {
					connection.disconnect();
				}
			}
		}

	}

	/*----- PROTECTED REGION END -----*/// TM_Monitor.methods

	/**
	 * Starts the server.
	 * 
	 * @param args
	 *            program arguments (instance_name [-v[trace level]] [-nodb
	 *            [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		/*----- PROTECTED REGION ID(TM_Monitor.main) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/// TM_Monitor.main
		ServerManager.getInstance().start(args, TM_Monitor.class);
		System.out.println("------- Started -------------");
	}
}
